<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Salon Dashboard</title>
    <link rel="icon" href="/images/logo 3-square.png" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Gowun+Batang&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
   
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            margin: 0;
            background-color: #f9f9f9; /* Light gray background */
            box-sizing: border-box;
        }
    
        .container {
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
        }
    
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #333; /* Dark gray text */
        }
    
        /* Metrics Section */
        .metrics {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }
    
        .metric-card {
            flex: 1 1 150px;
            max-width: 200px;
            padding: 15px;
            border-radius: 10px;
            background-color: #fff; /* White background */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }
    
        .metric-card img {
            width: 40px;
            height: 40px;
            margin-bottom: 10px;
        }
    
        .metric-card h3 {
            margin: 0;
            font-size: 14px;
            color: #666; /* Medium gray text */
        }
    
        .metric-card p {
            margin: 0;
            font-size: 22px;
            font-weight: bold;
            color: #333; /* Dark gray text */
        }
    
        /* Target Form */
        .target-form {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
    
        .target-form input {
            padding: 10px;
            border: 1px solid #ccc; /* Light gray border */
            border-radius: 5px;
            width: 150px;
            max-width: 100%;
        }
    
        .target-form button {
            background-color: #4CAF50; /* Green background */
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
    
        .target-form button:hover {
            background-color: #45a049; /* Darker green on hover */
        }
    
        /* Charts Section */
        #clientDonutChart, #genderPieChart {
            max-width: 300px;
            max-height: 300px;
            margin: 10px auto;
        }
    
        /* Monthly Line Chart */
        #monthlyChart {
            width: 100%;
            max-width: 800px;
            max-height: 400px;
            margin: 20px auto;
        }
    
        /* Trending Services Table */
        .trending-services {
            margin-top: 30px;
        }
    
        .trending-services h2 {
            font-size: 18px;
            margin-bottom: 10px;
            color: #333; /* Dark gray text */
            text-align: center;
        }
    
        .trending-services table {
            width: 100%;
            border-collapse: collapse;
            margin: 0 auto;
        }
    
        .trending-services th, .trending-services td {
            padding: 10px;
            border: 1px solid #ddd; /* Light gray border */
            text-align: center;
        }
    
        .trending-services th {
            background-color: #f1f1f1; /* Light gray background for headers */
            font-weight: bold;
        }
    
        .trending-services tbody tr:nth-child(even) {
            background-color: #f9f9f9; /* Alternating light gray rows */
        }
    
        .trending-services tbody tr:hover {
            background-color: #f1f1f1; /* Light gray hover effect */
        }
    
        /* Responsive Design */
        @media (max-width: 768px) {
            .metrics {
                flex-direction: column;
                align-items: center;
            }
    
            .metric-card {
                width: 100%;
                max-width: 250px;
            }
    
            #monthlyChart {
                max-width: 100%;
            }
    
            .target-form input {
                width: 100%;
            }
        }
    </style>
    
    
</head>
<body>
    <%- include('partials/navbar') %>
    <%- include('partials/second_navbar') %>
    <div class="container">
        <h1>Salon Dashboard</h1>

         <!-- Metrics Section with Cute Cards -->
        <div class="metrics">
            <div class="metric-card">
                <img src="/images/barbershop.png" alt="Clients Icon"> <!-- Placeholder image -->
                <h3>Clients</h3>
                <p id="clientCount">0</p>
            </div>
            <div class="metric-card">
                <img src="/images/appointment-book.png" alt="Appointments Icon"> <!-- Placeholder image -->
                <h3>Appointments</h3>
                <p id="appointmentCount">0</p>
            </div>
            <div class="metric-card">
                <img src="/images/service.png" alt="Services Icon"> <!-- Placeholder image -->
                <h3>Services</h3>
                <p id="serviceCount">0</p>
            </div>
            <div class="metric-card">
                <img src="/images/member-card.png" alt="Membership Icon"> <!-- Placeholder image -->
                <h3>Valid Memberships</h3>
                <p id="validMembershipCount">0</p>
            </div>
            
        </div>

        <!-- Monthly Target Setting Form -->
        <div class="target-form">
            <label for="monthlyTarget">Set Monthly Target:</label>
            <input type="number" id="monthlyTarget" placeholder="Enter target for the current month">
            <button onclick="setMonthlyTarget()">Set Monthly Target</button>
        </div>

        <div style="display: flex; justify-content: space-around; align-items: center;">
            <div>
                <h2>Client Achievement</h2>
                <canvas id="clientDonutChart"></canvas>
            </div>
            <div>
                <h2>Gender Diversity</h2>
                <canvas id="genderPieChart"></canvas>
            </div>
        </div>
        



        <div style="display: flex;">
            <!-- Monthly Sales Target Chart -->
            <div>
                <h2>Monthly Sales Target Achievement Chart</h2>
                <canvas id="monthlyChart" width="650" height="200"></canvas>
            </div>
            

            <!-- Top Trending Services Table -->
            <div class="trending-services">
                <h2>Top Trending Services</h2>
                <table id="trendingServicesTable">
                    <thead>
                        <tr>
                            <th>Sl.no</th>
                            <th>Service</th>
                            <th>No. of Utilization</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>


        let targetClients = 0;  // Initial target value
        let monthlyChart;       // Reference for the monthly line chart

        document.addEventListener("DOMContentLoaded", () => {
            fetchMetrics();                                // Load metrics on page load
            fetchCurrentMonthData();                       // Load donut chart data on page load
            fetchMonthlyData();   
            
            // Refresh the metrics every 30 seconds
            setInterval(fetchMetrics, 30000);// Load line chart data on page load
        });
        
        // Fetch counts for metrics
        async function fetchMetrics() {
            try {
                const clientResponse = await fetch('/client-count');
                const clientData = await clientResponse.json();
                document.getElementById('clientCount').innerText = clientData.clientCount;

                const serviceResponse = await fetch('/menu-count');
                const serviceData = await serviceResponse.json();
                document.getElementById('serviceCount').innerText = serviceData.serviceCount;

                const appointmentResponse = await fetch('/appointment-count');
                const appointmentData = await appointmentResponse.json();
                document.getElementById('appointmentCount').innerText = appointmentData.appointmentCount;

                // Fetch the valid membership count
                const membershipResponse = await fetch('/valid-membership-count');
                const membershipData = await membershipResponse.json();
                document.getElementById('validMembershipCount').innerText = membershipData.validMembershipCount;

            } catch (error) {
                console.error('Error fetching metrics:', error);
            }
        }

        // Fetch metrics on load
        fetchMetrics();
        

        async function fetchCurrentMonthData() {
            try {
                const response = await fetch('/current-month-data');
                const data = await response.json();

                if (data.success) {
                    const achieved = data.achieved || 0;
                    const target = data.target || 0;
                    const remaining = Math.max(target - achieved, 0);

                    updateDonutChart(achieved, remaining);
                } else {
                    console.error(data.message || "No data for the current month.");
                    updateDonutChart(0, 0); // Reset the chart if no data
                }
            } catch (error) {
                console.error("Error fetching current month data:", error);
                updateDonutChart(0, 0); // Reset the chart in case of an error
            }
        }

        function createDonutChart() {
            const ctx = document.getElementById('clientDonutChart').getContext('2d');
            return new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Achieved', 'Remaining'],
                    datasets: [{
                        label: 'Client Target Progress',
                        data: [0, 0],  // Initial placeholder data
                        backgroundColor: ['#4CAF50', '#f44336'],
                        cutout: '70%'  // Makes it a thinner ring
                    }]
                },
                options: {
                    circumference: 180,  // Half-donut
                    rotation: -90,       // Rotate to the bottom
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        datalabels: {
                            display: true,
                            color: '#ffffff',
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            formatter: (value, context) => {
                                const dataset = context.chart.data.datasets[0].data;
                                const total = dataset.reduce((acc, val) => acc + val, 0);
                                const percentage = ((value / total) * 100).toFixed(0) + '%';
                                return percentage;
                            }
                        }
                    },
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            boxWidth: 20,
                            padding: 15,
                            font: {
                                size: 14
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels] // Ensure ChartDataLabels is loaded as a plugin here
            });
        }

        function updateDonutChart(achieved, remaining) {
            donutChart.data.datasets[0].data = [achieved, remaining];
            donutChart.update();
        }

        // Initialize the chart
        const donutChart = createDonutChart();
        fetchCurrentMonthData();


       
        function createGenderPieChart(maleCount, femaleCount, othersCount) {
            const ctx = document.getElementById('genderPieChart').getContext('2d');
            return new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Female', 'Male', 'Others'],
                    datasets: [{
                        data: [femaleCount, maleCount, othersCount],
                        backgroundColor: ['#36A2EB', '#FF6384', '#FFCE56'],
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            enabled: false // Disable default tooltips
                        },
                        datalabels: {
                            color: '#ffffff',
                            formatter: (value, context) => {
                                let total = context.chart.data.datasets[0].data.reduce((acc, val) => acc + val, 0);
                                let percentage = ((value / total) * 100).toFixed(0) + '%';
                                return percentage;
                            },
                            font: {
                                weight: 'bold',
                                size: 14
                            }
                        },
                        legend: {
                            display: true,
                            position: 'right',
                            labels: {
                                boxWidth: 20,
                                padding: 15,
                                font: {
                                    size: 14
                                }
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels] // Add the ChartDataLabels plugin for displaying percentages
            });
        }

        // Fetch gender data and create the pie chart
        async function fetchGenderData() {
            try {
                const response = await fetch('/gender-data');
                const data = await response.json();
                const { maleCount, femaleCount, othersCount } = data;

                createGenderPieChart(maleCount, femaleCount, othersCount);
            } catch (error) {
                console.error("Error fetching gender data:", error);
            }
        }

        fetchGenderData();

        // Set Monthly Target Function
        async function setMonthlyTarget() {
            const targetValue = document.getElementById('monthlyTarget').value;

            if (!targetValue) {
                alert("Please enter a target value.");
                return;
            }

            try {
                const response = await fetch('/set-monthly-target', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ target: targetValue })
                });

                const result = await response.json();
                if (response.ok) {
                    alert(result.message);

                    // Refresh the donut chart and line chart immediately after setting the target
                    fetchCurrentMonthData(); // Refresh the half-donut chart with updated target and achieved values
                    fetchMonthlyData();      // Refresh the monthly achievement line chart with updated data
                } else {
                    alert(result.message || "Failed to set target.");
                }
            } catch (error) {
                console.error("Error setting monthly target:", error);
                alert("Error setting target. Please try again.");
            }
        }


        // Monthly Sales Target Achievement Chart
        async function fetchMonthlyData() {
            try {
                const response = await fetch('/monthly-data');
                const data = await response.json();
                const months = data.map(entry => entry.month);
                const targets = data.map(entry => entry.target);
                const achievements = data.map(entry => entry.achieved);

                createOrUpdateMonthlyChart(months, targets, achievements);
            } catch (error) {
                console.error("Error fetching monthly data:", error);
            }
        }

        function createOrUpdateMonthlyChart(months, targets, achievements) {
            const ctx = document.getElementById('monthlyChart').getContext('2d');

            if (monthlyChart) {
                // Update the existing chart data
                monthlyChart.data.labels = months;
                monthlyChart.data.datasets[0].data = achievements;
                monthlyChart.data.datasets[1].data = targets;
                monthlyChart.update();
            } else {
                // Create a new chart if it doesn't exist
                monthlyChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: months,
                        datasets: [
                            {
                                label: 'Achieved sales target',
                                data: achievements,
                                borderColor: 'cyan',
                                fill: false,
                            },
                            {
                                label: 'Actual sales target',
                                data: targets,
                                borderColor: 'pink',
                                fill: false,
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                            }
                        },
                        responsive: true,
                        maintainAspectRatio: false // Disable aspect ratio to allow custom sizing
                    }
                });
            }
        }

        fetchMonthlyData(); // Fetch data and render the monthly chart
 // Fetch trending services data and populate table
 async function fetchTrendingServices() {
            try {
                const response = await fetch('/trending-services');
                const data = await response.json();
                const tbody = document.getElementById('trendingServicesTable').querySelector('tbody');
                
                tbody.innerHTML = ""; // Clear previous data
                data.forEach((service, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${service.name}</td>
                        <td>${service.utilization}</td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error("Error fetching trending services:", error);
            }
        }

        fetchTrendingServices(); // Fetch trending services on load
    
    </script>
</body>
</html>